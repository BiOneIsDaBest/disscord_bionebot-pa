import sqlite3
from discord.ext import commands
from datetime import datetime, timedelta
from discord import Embed, Color
import discord

class SubTime(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = sqlite3.connect("data.sqlite", timeout=5)
        self.cursor = self.db.cursor()
        self.log_channel_id = 1378056650799186022

    def seconds_to_string(self, seconds: int) -> str:
        td = timedelta(seconds=seconds)
        return f"{round(td.total_seconds() // 3600, 2)} gi·ªù, {round((td.total_seconds() % 3600) // 60, 2)} ph√∫t, {round(td.total_seconds() % 60, 2)} gi√¢y"

    def day_to_timestamp(self, date_str: str) -> float:
        dt_obj = datetime.strptime(date_str + " 12:00:00", "%d/%m/%Y %H:%M:%S")
        return datetime.timestamp(dt_obj)

    @commands.has_role("Ph√≤ng Nh√¢n S·ª±")
    @commands.hybrid_command(description="Th√™m th·ªùi gian l√†m vi·ªác th·ªß c√¥ng")
    async def addtime(self, ctx, seconds: int, date: str, member: discord.Member):
        try:
            time_str = self.seconds_to_string(seconds)
            timestamp = self.day_to_timestamp(date)

            self.cursor.execute(
                "INSERT INTO OFFDUTY (user_id, day, user_total, license) VALUES (?, ?, ?, ?)",
                (member.id, timestamp, time_str, "MANUAL_ADD")
            )
            self.db.commit()

            em = Embed(title="‚úÖ Th√™m th·ªùi gian th√†nh c√¥ng",
                       description=f"üë§ {member.mention} ƒë√£ ƒë∆∞·ª£c th√™m `{time_str}` v√†o ng√†y `{date}`",
                       color=Color.green())
            await ctx.reply(embed=em)

            # g·ª≠i log
            log_channel = self.bot.get_channel(self.log_channel_id)
            if log_channel:
                await log_channel.send(content=f"{ctx.author.mention}, ƒë√£ c·∫≠p nh·∫≠t th·ªùi gian cho nh√¢n vi√™n:", embed=em)

        except Exception as e:
            await ctx.reply(f"‚ùå L·ªói: {e}")

    @commands.has_role("Ph√≤ng Nh√¢n S·ª±")
    @commands.hybrid_command(description="X√≥a th·ªùi gian l√†m vi·ªác th·ªß c√¥ng")
    async def removetime(self, ctx, seconds: int, date: str, member: discord.Member):
        try:
            start_ts = datetime.strptime(date + " 00:00:00", "%d/%m/%Y %H:%M:%S").timestamp()
            end_ts = datetime.strptime(date + " 23:59:59", "%d/%m/%Y %H:%M:%S").timestamp()

            self.cursor.execute(
                "SELECT rowid, user_total FROM OFFDUTY WHERE user_id = ? AND day BETWEEN ? AND ?",
                (member.id, start_ts, end_ts))
            rows = self.cursor.fetchall()

            if not rows:
                await ctx.reply("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi th·ªùi gian n√†o ƒë·ªÉ x√≥a.")
                return

            # T·ªïng th·ªùi gian trong ng√†y
            total_seconds = 0
            for _, time_str in rows:
                h, m, s = [float(part.split()[0]) for part in time_str.split(",")]
                total_seconds += int(h * 3600 + m * 60 + s)

            # Tr·ª´ th·ªùi gian
            new_total = max(0, total_seconds - seconds)
            new_time_str = self.seconds_to_string(new_total)
            removed_str = self.seconds_to_string(min(total_seconds, seconds))

            if new_total == 0:
                # Xo√° t·∫•t c·∫£ b·∫£n ghi
                for rowid, _ in rows:
                    self.cursor.execute("DELETE FROM OFFDUTY WHERE rowid = ?", (rowid,))
                action = "‚ùå ƒê√£ xo√° to√†n b·ªô th·ªùi gian trong ng√†y"
            else:
                # X√≥a c√°c b·∫£n ghi tr·ª´ c√°i cu·ªëi c√πng
                for rowid, _ in rows[:-1]:
                    self.cursor.execute("DELETE FROM OFFDUTY WHERE rowid = ?", (rowid,))    
                # C·∫≠p nh·∫≠t b·∫£n ghi cu·ªëi v·ªõi th·ªùi gian c√≤n l·∫°i
                last_rowid = rows[-1][0]
                self.cursor.execute("UPDATE OFFDUTY SET user_total = ? WHERE rowid = ?", (new_time_str, last_rowid))
                action = f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t c√≤n l·∫°i `{new_time_str}`"

            self.db.commit()
            em = Embed(title="üßÆ X·ª≠ l√Ω gi·∫£m th·ªùi gian",
                    description=f"{action} cho üë§ {member.mention} v√†o ng√†y `{date}`\nƒê√£ tr·ª´: `{removed_str}`",
                    color=Color.red())
            await ctx.reply(embed=em)

            # g·ª≠i log
            log_channel = self.bot.get_channel(self.log_channel_id)
            if log_channel:
                await log_channel.send(content=f"{ctx.author.mention}, ƒë√£ c·∫≠p nh·∫≠t th·ªùi gian cho nh√¢n vi√™n:", embed=em)

        except Exception as e:
            await ctx.reply(f"‚ùå L·ªói: {e}")

async def setup(bot):
    await bot.add_cog(SubTime(bot))
