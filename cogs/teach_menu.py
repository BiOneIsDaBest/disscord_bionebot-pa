import sqlite3
import traceback
import csv
import os
from discord.ext import commands
from discord import Embed, ButtonStyle, Interaction, File
from discord.ui import View, button, Button, Modal, TextInput
from datetime import datetime, timedelta

GDDT_ROLE_ID = 1087276659327119367  # ID role Ph√≤ng Gi√°o D·ª•c & ƒê√†o T·∫°o

class ExportButtonView(View):
    def __init__(self, filename, start_date_str):
        super().__init__(timeout=300)
        self.filename = filename
        self.start_date_str = start_date_str

    @button(label="üõ† ƒêi·ªÅu ch·ªânh", style=ButtonStyle.secondary)
    async def edit_teaching(self, interaction: Interaction, button: Button):
        if not any(r.id == 1087276659327119368 for r in interaction.user.roles):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng ƒëi·ªÅu ch·ªânh n√†y.", ephemeral=True)
            return
        await interaction.response.send_modal(AdjustTeachModal(self.start_date_str))

    @button(label="üì• T·∫£i file Excel", style=ButtonStyle.primary)
    async def export_csv(self, interaction: Interaction, button: Button):
        try:
            await interaction.response.send_message("üìÅ D∆∞·ªõi ƒë√¢y l√† file Excel c·ªßa b·∫°n:", file=File(self.filename), ephemeral=True)

            # g·ª≠i log t·ªõi k√™nh LOG TIME GD
            log_channel = interaction.guild.get_channel(1378078053929844908)
            if log_channel:
                await log_channel.send(
                    f"üì§ {interaction.user.mention} ƒë√£ tr√≠ch xu·∫•t b·∫£ng time t·ª´ ng√†y **{self.filename[12:22].replace('-', '/')}** ƒë·∫øn **{self.filename[24:34].replace('-', '/')}**",
                    file=File(self.filename)
                )
            os.remove(self.filename)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi g·ª≠i file: {e}", ephemeral=True)

class RoleSelectView(View):
    def __init__(self, bot, role: str):
        super().__init__(timeout=None)
        self.bot = bot
        self.role = role

    @button(label="Ph√≤ng GD & ƒêT", style=ButtonStyle.primary, custom_id="gd_dt")
    async def gd_dt(self, interaction: Interaction, button: Button):
        if not any(r.id == GDDT_ROLE_ID for r in interaction.user.roles):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn thu·ªôc Ph√≤ng GD & ƒêT.", ephemeral=True)
            return
        await self.record_teach(interaction, self.role, "Ph√≤ng GD & ƒêT")

    @button(label="Ph√≤ng Ban Kh√°c", style=ButtonStyle.primary, custom_id="other")
    async def other(self, interaction: Interaction, button: Button):
        await self.record_teach(interaction, self.role, "Ph√≤ng Ban Kh√°c")

    async def record_teach(self, interaction: Interaction, role: str, department: str):
        conn = sqlite3.connect("data.sqlite")
        cursor = conn.cursor()
        now = datetime.now()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS TEACHLOG (
                user_id INTEGER,
                timestamp REAL,
                role TEXT,
                department TEXT,
                tiet INTEGER
            )
        """)
        cursor.execute("INSERT INTO TEACHLOG VALUES (?, ?, ?, ?, ?)",
                       (interaction.user.id, now.timestamp(), role, department, 1))
        conn.commit()
        conn.close()

        await interaction.response.send_message(f"‚úÖ B·∫Øt ƒë·∫ßu ghi nh·∫≠n **1 ti·∫øt** d·∫°y cho **{role} - {department}**.", ephemeral=True)

        log_channel = interaction.guild.get_channel(1380979632777465986)
        if log_channel:
            await log_channel.send(f"üìö {interaction.user.mention} ƒë√£ b·∫Øt ƒë·∫ßu ti·∫øt h·ªçc v·ªõi vai tr√≤: **{role}** ( **{department}** ).")



class TeachView(View):
    
    async def dot_menu(self, interaction: Interaction, button: Button):
        await interaction.response.send_modal(DeleteModal(self.bot))
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @button(label="Gi·∫£ng Vi√™n", style=ButtonStyle.secondary, custom_id="giang_vien")
    async def giang_vien(self, interaction: Interaction, button: Button):
        await interaction.response.send_message(view=RoleSelectView(self.bot, "Gi·∫£ng Vi√™n"), ephemeral=True)

    @button(label="Tr·ª£ Gi·∫£ng", style=ButtonStyle.secondary, custom_id="tro_giang")
    async def tro_giang(self, interaction: Interaction, button: Button):
        await interaction.response.send_message(view=RoleSelectView(self.bot, "Tr·ª£ Gi·∫£ng"), ephemeral=True)

    @button(label="üìä Tracking l·ªãch s·ª≠", style=ButtonStyle.success, custom_id="tracking")
    async def tracking(self, interaction: Interaction, button: Button):
        await interaction.response.send_modal(TrackModal(self.bot))

class DeleteModal(Modal, title="üóë ƒêi·ªÅu ch·ªânh ti·∫øt h·ªçc theo th·ªùi gian"):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.start_date = TextInput(label="T·ª´ ng√†y (dd/mm/yyyy)", required=True)
        self.end_date = TextInput(label="ƒê·∫øn ng√†y (dd/mm/yyyy)", required=True)
        self.add_item(self.start_date)
        self.add_item(self.end_date)

    async def on_submit(self, interaction: Interaction):
        # Ki·ªÉm tra quy·ªÅn h·∫°n role Tr∆∞·ªüng Ph√≤ng
        if not any(r.id == 1087276659327119368 for r in interaction.user.roles):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng ƒëi·ªÅu ch·ªânh n√†y.", ephemeral=True)
            return
        # Ki·ªÉm tra quy·ªÅn h·∫°n role Tr∆∞·ªüng Ph√≤ng
        if not any(r.id == 1087276659327119368 for r in interaction.user.roles):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng ƒëi·ªÅu ch·ªânh n√†y.", ephemeral=True)
            return
        try:
            start = datetime.strptime(self.start_date.value, "%d/%m/%Y")
            end = datetime.strptime(self.end_date.value + " 23:59:59", "%d/%m/%Y %H:%M:%S")

            conn = sqlite3.connect("data.sqlite")
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, role, department, COUNT(*) FROM TEACHLOG
                WHERE timestamp BETWEEN ? AND ?
                GROUP BY user_id, role, department
            """, (start.timestamp(), end.timestamp()))

            entries = cursor.fetchall()
            if not entries:
                await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian.", ephemeral=True)
                return

            display_list = []
            user_map = {}
            for i, (user_id, role, dept, count) in enumerate(entries, 1):
                key = (user_id, dept)
                if key not in user_map:
                    user_map[key] = {"Gi·∫£ng Vi√™n": 0, "Tr·ª£ Gi·∫£ng": 0}
                user_map[key][role] = count

            message = f"üìÜ D·ªØ li·ªáu t·ª´ `{self.start_date.value}` ƒë·∫øn `{self.end_date.value}`"
            numbered = []
            index = 1
            for (user_id, dept), roles in user_map.items():
                member = interaction.guild.get_member(user_id)
                name = member.mention if member else f"(Unknown {user_id})"
                gv = roles.get("Gi·∫£ng Vi√™n", 0)
                tg = roles.get("Tr·ª£ Gi·∫£ng", 0)
                message += f"{index}. {name} - {gv} ti·∫øt gi·∫£ng vi√™n, {tg} ti·∫øt tr·ª£ gi·∫£ng t·∫°i {dept}"
                numbered.append((index, user_id, dept, gv, tg))
                index += 1

            message += "üëâ H√£y ch·ªçn s·ªë th·ª© t·ª± b√™n d∆∞·ªõi ƒë·ªÉ ƒëi·ªÅu ch·ªânh."

            # t·∫°o view ch·ªçn ng∆∞·ªùi xo√°
            class SelectUserToDelete(Modal, title="Ch·ªçn ng∆∞·ªùi v√† s·ªë ti·∫øt c·∫ßn xo√°"):
                def __init__(self, bot):
                    super().__init__()
                    self.bot = bot
                    self.stt = TextInput(label="S·ªë th·ª© t·ª± ng∆∞·ªùi c·∫ßn xo√°", required=True)
                    self.role = TextInput(label="Vai tr√≤ c·∫ßn xo√° (Gi·∫£ng Vi√™n / Tr·ª£ Gi·∫£ng)", required=True)
                    self.sotiethoc = TextInput(label="S·ªë ti·∫øt c·∫ßn xo√°", required=True)
                    self.start = start
                    self.end = end
                    self.entries = numbered
                    self.add_item(self.stt)
                    self.add_item(self.sotiethoc)

                async def on_submit(self, interaction: Interaction):
                    try:
                        stt = int(self.stt.value.strip())
                        amount = int(self.sotiethoc.value.strip())
                        entry = next((e for e in self.entries if e[0] == stt), None)
                        role = self.role.value.strip().title()
                        if role not in ["Gi·∫£ng Vi√™n", "Tr·ª£ Gi·∫£ng"]:
                            await interaction.response.send_message("‚ùå Vai tr√≤ kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p Gi·∫£ng Vi√™n ho·∫∑c Tr·ª£ Gi·∫£ng.", ephemeral=True)
                            return
                        if not entry:
                            await interaction.response.send_message("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ph√π h·ª£p.", ephemeral=True)
                            return

                        user_id, dept, _, _ = entry[1:]

                        conn = sqlite3.connect("data.sqlite")
                        cursor = conn.cursor()
                        cursor.execute("""
                            DELETE FROM TEACHLOG
                            WHERE rowid IN (
                                SELECT rowid FROM TEACHLOG
                                WHERE user_id = ? AND department = ? AND role = ? AND timestamp BETWEEN ? AND ?
                                ORDER BY timestamp DESC
                                LIMIT ?
                            )
                        """, (user_id, dept, self.start.timestamp(), self.end.timestamp(), role, amount))
                        conn.commit()
                        conn.close()

                        await interaction.response.send_message(f"‚úÖ ƒê√£ xo√° `{amount}` ti·∫øt **{role}** c·ªßa <@{user_id}> t·∫°i **{dept}**.", ephemeral=True)
                    except Exception as e:
                        await interaction.response.send_message(f"‚ùå L·ªói khi xo√°: {e}", ephemeral=True)

            await interaction.followup.send("‚¨áÔ∏è Nh·∫≠p STT v√† s·ªë ti·∫øt c·∫ßn xo√°:", ephemeral=True)
            await interaction.followup.send_modal(SelectUserToDelete(self.bot))
            await interaction.response.send_message(message, ephemeral=True)

        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói: {e}", ephemeral=True)

class AdjustTeachModal(Modal, title="üõ† ƒêi·ªÅu ch·ªânh ti·∫øt h·ªçc"):
    def __init__(self, start_date_str):
        super().__init__()
        self.start_date_str = start_date_str
        self.user_id = TextInput(label="ID ng∆∞·ªùi d√πng", required=True)
        self.role = TextInput(label="Vai tr√≤ (Gi·∫£ng Vi√™n / Tr·ª£ Gi·∫£ng)", required=True)
        self.tiet_moi = TextInput(label="S·ªë ti·∫øt mu·ªën ƒë·∫∑t l·∫°i", required=True)
        self.add_item(self.user_id)
        self.add_item(self.role)
        self.add_item(self.tiet_moi)

    async def on_submit(self, interaction: Interaction):
        try:
            uid = int(self.user_id.value.strip())
            role = self.role.value.strip().title()
            new_count = int(self.tiet_moi.value.strip())

            if role not in ["Gi·∫£ng Vi√™n", "Tr·ª£ Gi·∫£ng"]:
                await interaction.response.send_message("‚ùå Vai tr√≤ kh√¥ng h·ª£p l·ªá. Nh·∫≠p Gi·∫£ng Vi√™n ho·∫∑c Tr·ª£ Gi·∫£ng.", ephemeral=True)
                return

            conn = sqlite3.connect("data.sqlite")
            cursor = conn.cursor()

            # X√°c ƒë·ªãnh ph√≤ng ban ng∆∞·ªùi ƒë√≥ ƒëang d·∫°y g·∫ßn nh·∫•t
            cursor.execute("""
                SELECT department FROM TEACHLOG
                WHERE user_id = ? AND role = ?
                GROUP BY department
                ORDER BY COUNT(*) DESC
                LIMIT 1
            """, (uid, role))
            result = cursor.fetchone()
            if not result:
                await interaction.response.send_message("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ti·∫øt h·ªçc ph√π h·ª£p.", ephemeral=True)
                return

            department = result[0]

            # Truy v·∫•n s·ªë ti·∫øt c≈© tr∆∞·ªõc khi xo√°
            cursor.execute("SELECT COUNT(*) FROM TEACHLOG WHERE user_id = ? AND role = ? AND department = ?", (uid, role, department))
            old_count = cursor.fetchone()[0]

            # Xo√° to√†n b·ªô ti·∫øt c≈© theo user + role + department
            cursor.execute("DELETE FROM TEACHLOG WHERE user_id = ? AND role = ? AND department = ?", (uid, role, department))

            # X√°c ƒë·ªãnh timestamp t·ª´ kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn khi tracking
            start_ts = datetime.strptime(self.start_date_str, "%d/%m/%Y").timestamp()
            for i in range(new_count):
                ts = start_ts + i
                cursor.execute("INSERT INTO TEACHLOG VALUES (?, ?, ?, ?, 1)", (uid, ts, role, department))

            conn.commit()
            conn.close()

            await interaction.response.send_message(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng: <@{uid}> gi·ªù c√≥ `{new_count}` ti·∫øt **{role}** t·∫°i **{department}**.", ephemeral=True)

            log_channel = interaction.guild.get_channel(1378078053929844908)
            if log_channel:
                await log_channel.send(f"üõ† {interaction.user.mention} ƒë√£ ƒëi·ªÅu ch·ªânh ti·∫øt h·ªçc cho <@{uid}>: t·ª´ `{old_count}` ti·∫øt {role} th√†nh `{new_count}` ti·∫øt {role} ( {department} ).")

            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi ƒëi·ªÅu ch·ªânh: {e}", ephemeral=True)

class TrackModal(Modal, title="Tracking s·ªë ti·∫øt d·∫°y h·ªçc"):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.start_date = TextInput(label="T·ª´ ng√†y (dd/mm/yyyy)", required=True)
        self.end_date = TextInput(label="ƒê·∫øn ng√†y (dd/mm/yyyy)", required=True)
        self.add_item(self.start_date)
        self.add_item(self.end_date)

    async def on_submit(self, interaction: Interaction):
        try:
            print("[DEBUG] on_submit triggered")
            start = datetime.strptime(self.start_date.value, "%d/%m/%Y")
            end = datetime.strptime(self.end_date.value + " 23:59:59", "%d/%m/%Y %H:%M:%S")

            conn = sqlite3.connect("data.sqlite")
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, role, department, COUNT(*) FROM TEACHLOG
                WHERE timestamp BETWEEN ? AND ?
                GROUP BY user_id, role, department
            """, (start.timestamp(), end.timestamp()))

            data = {}
            export_data = []
            for user_id, role, dept, count in cursor.fetchall():
                if user_id not in data:
                    data[user_id] = {
                        "Ph√≤ng GD & ƒêT": {"Gi·∫£ng Vi√™n": 0, "Tr·ª£ Gi·∫£ng": 0},
                        "Ph√≤ng Ban Kh√°c": {"Gi·∫£ng Vi√™n": 0, "Tr·ª£ Gi·∫£ng": 0}
                    }
                if dept not in data[user_id]:
                    data[user_id][dept] = {"Gi·∫£ng Vi√™n": 0, "Tr·ª£ Gi·∫£ng": 0}
                data[user_id][dept][role] = count

                member = interaction.guild.get_member(user_id)
                display_name = member.display_name if member else f"(Unknown {user_id})"

                if dept == "Ph√≤ng GD & ƒêT":
                    salary = count * 100000 if role == "Gi·∫£ng Vi√™n" else count * 50000
                else:
                    salary = count * 70000 if role == "Gi·∫£ng Vi√™n" else count * 30000

                export_data.append([display_name, role, dept, count, salary])

            conn.close()

            filename = f"BangLuongGD_{self.start_date.value.replace('/', '-')}to{self.end_date.value.replace('/', '-')}_{interaction.user.id}.csv"
            with open(filename, "w", newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(["T√™n hi·ªÉn th·ªã", "Vai tr√≤", "Ph√≤ng ban", "S·ªë ti·∫øt", "T·ªïng ti·ªÅn ($)"])
                writer.writerows(export_data)

            description = f"üìÜ T·ª´ `{self.start_date.value}` ƒë·∫øn `{self.end_date.value}`\n\n"
            for uid, by_dept in data.items():
                member = interaction.guild.get_member(uid)
                member_name = f"**{member.display_name}** - `{uid}`" if member else f"**(Unknown)** - `{uid}`"
                total_salary = 0
                desc = f"> üßë‚Äçüè´ {member_name}\n"
                for dept in ["Ph√≤ng GD & ƒêT", "Ph√≤ng Ban Kh√°c"]:
                    gv = by_dept.get(dept, {}).get("Gi·∫£ng Vi√™n", 0)
                    tg = by_dept.get(dept, {}).get("Tr·ª£ Gi·∫£ng", 0)
                    if gv == 0 and tg == 0:
                        continue
                    if dept == "Ph√≤ng GD & ƒêT":
                        salary = gv * 100000 + tg * 50000
                    else:
                        salary = gv * 70000 + tg * 30000
                    total_salary += salary
                    desc += f"{gv} ti·∫øt **gi·∫£ng vi√™n**, {tg} ti·∫øt **tr·ª£ gi·∫£ng** t·∫°i **{dept}**\n"
                desc += f"<a:money_bioneshop:1145256811176407070> T·ªïng l∆∞∆°ng: `{total_salary:,}$`\n\n"
                description += desc

            em = Embed(title="üìä B√°o c√°o l·ªãch s·ª≠ d·∫°y h·ªçc", description=description, color=0x00FFCC)
            await interaction.response.send_message(embed=em, view=ExportButtonView(filename, self.start_date.value), ephemeral=True)

        except Exception as e:
            print(f"[TRACKING ERROR] {e}")
            traceback.print_exc()
            await interaction.response.send_message("‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)

class TeachEmbed(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="gdmenu")
    async def send_teach_panel(self, ctx):
        em = Embed(
            title="üìã Ch·∫•m c√¥ng Gi√°o D·ª•c",
            description="Vui l√≤ng ch·ªçn vai tr√≤ gi·∫£ng d·∫°y ph√π h·ª£p.",
            color=0x9900FF
        )
        em.add_field(name="Ch·ªçn vai tr√≤", value="‚û§ Gi·∫£ng Vi√™n\n‚û§ Tr·ª£ Gi·∫£ng", inline=False)
        em.add_field(name="Tracking", value="‚û§ Xem l·ªãch s·ª≠ ti·∫øt d·∫°y", inline=False)
        em.set_footer(text="BiOneIsDaBest/BiOneBot ‚Ä¢ H·ªá Th·ªëng Ch·∫•m C√¥ng T·ª± ƒê·ªông")
        await ctx.send(embed=em, view=TeachView(self.bot))

async def setup(bot):
    await bot.add_cog(TeachEmbed(bot))
